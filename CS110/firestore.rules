rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read and write their own profile data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts collection - users can read all posts, but only create/update their own
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Comments collection - users can read all comments, but only create/update their own
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Followers/Following collections
    match /users/{userId}/followers/{followerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == followerId;
    }
    
    match /users/{userId}/following/{followingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    // Follows collection - users can read all follows, but only create/update their own
    match /{document=**} {
      allow read, write: if true;
    }
    
    match /posts/{postId}/reactions/{reactionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    // NEW: Historical Events
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // NEW: Event submissions for review
    match /eventSubmissions/{submissionId} {
    allow read: if request.auth != null;
    allow create: if request.auth != null && request.auth.uid == resource.data.submittedBy;
    allow update: if request.auth != null && 
      (request.auth.uid == resource.data.submittedBy || 
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
}
    
    // NEW: Comments on events
    match /eventComments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
     
    // NEW: Likes/dislikes on event comments
    match /eventComments/{commentId}/reactions/{reactionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}